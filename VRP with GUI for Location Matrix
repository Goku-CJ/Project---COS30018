import matplotlib.pyplot as plt
import numpy as np
import math

#LOCATION COORDINATES
locations = [
    (456, 320),  # Location 0 - Depot
    (228, 0),    # Location 1
    (912, 0),    # Location 2
    (0, 80),     # Location 3
    (114, 80),   # Location 4
    (570, 160),  # Location 5
    (798, 160),  # Location 6
    (342, 240),  # Location 7
    (684, 240),  # Location 8
    (570, 400),  # Location 9
    (912, 400),  # Location 10
    (114, 480),  # Location 11
    (228, 480),  # Location 12
    (342, 560),  # Location 13
    (684, 560),  # Location 14
    (0, 640),    # Location 15
    (798, 640)   # Location 16
]

#COMPUTING DISTANCE USING EUCLIDEAN 
def compute_euclidean_distance_matrix(locations):
    size = len(locations)
    distance_matrix = [[0] * size for _ in range(size)]
    for i in range(size):
        for j in range(size):
            if i != j:
                distance_matrix[i][j] = math.hypot(locations[i][0] - locations[j][0],
                                                   locations[i][1] - locations[j][1])
    return distance_matrix

def nearest_neighbor_route(distance_matrix, start, num_stops, global_visited):
    num_locations = len(distance_matrix)
    route = [start]
    current_location = start
    
    # Local visited for this vehicle
    local_visited = set()
    local_visited.add(start)
    
    # Find nearest neighbor for num_stops deliveries
    for _ in range(num_stops):
        nearest_distance = float('inf')
        nearest_location = None
        for i in range(num_locations):
            if i not in global_visited and i not in local_visited and distance_matrix[current_location][i] < nearest_distance:
                nearest_distance = distance_matrix[current_location][i]
                nearest_location = i
        
        # If we find a nearest unvisited location
        if nearest_location is not None:
            route.append(nearest_location)
            local_visited.add(nearest_location)
            global_visited.add(nearest_location)
            current_location = nearest_location
    
    # Return to the start (depot)
    route.append(start)
    return route

def assign_routes(distance_matrix, num_vehicles, deliveries_per_vehicle):
    routes = []
    global_visited = set([0])  # Start with depot as visited
    for vehicle_id in range(num_vehicles):
        route = nearest_neighbor_route(distance_matrix, start=0, num_stops=deliveries_per_vehicle, global_visited=global_visited)
        routes.append(route)
    return routes

def plot_routes(locations, routes):
    num_locations = len(locations)
    
    # Extract x and y coordinates
    x_coords, y_coords = zip(*locations)
    
    # Plot locations
    plt.figure(figsize=(12, 10))
    plt.scatter(x_coords, y_coords, color='blue', marker='o', s=100, zorder=5)
    
    # Label each location
    for i, (x, y) in enumerate(locations):
        plt.text(x, y, f' {i}', fontsize=12, ha='right')
    
    # Plot routes for each vehicle
    colors = ['red', 'green', 'blue', 'orange']
    for vehicle_id, route in enumerate(routes):
        route_x = [x_coords[i] for i in route]
        route_y = [y_coords[i] for i in route]
        plt.plot(route_x, route_y, color=colors[vehicle_id], marker='o', linestyle='-', linewidth=2, markersize=8, label=f'Vehicle {vehicle_id}', zorder=4)
        
        # Annotate distances and add arrows
        for i in range(len(route) - 1):
            plt.arrow(route_x[i], route_y[i], route_x[i + 1] - route_x[i], route_y[i + 1] - route_y[i],
                      head_width=10, head_length=10, fc=colors[vehicle_id], ec=colors[vehicle_id], zorder=3)
            plt.text((route_x[i] + route_x[i + 1]) / 2, (route_y[i] + route_y[i + 1]) / 2,
                     f'{distance_matrix[route[i]][route[i + 1]]:.1f}', fontsize=8, color='black', zorder=3)
    
    plt.xlabel('X Coordinate')
    plt.ylabel('Y Coordinate')
    plt.title('Optimized Routes for Each Vehicle')
    plt.legend()
    plt.grid(True)
    plt.show()

# Compute the distance matrix
distance_matrix = compute_euclidean_distance_matrix(locations)

# Assign routes to vehicles
num_vehicles = 4
deliveries_per_vehicle = 4
routes = assign_routes(distance_matrix, num_vehicles, deliveries_per_vehicle)

# Plot the routes
plot_routes(locations, routes)
