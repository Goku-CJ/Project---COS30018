import sys
import random
import math
from PyQt5.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget, QLineEdit, QLabel, QPushButton, QHBoxLayout
from matplotlib.figure import Figure
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas

def generate_locations(num_locations):
    # RANDOM LOCATION GENERATION WITH ID,X,Y AND NO OF LOCATIONS
    locations = [(0, 50, 50, 0)] # DEPOT CORDINATES
    locations += [(i + 1, random.randint(0, 100), random.randint(0, 100), random.randint(1, 5)) for i in range(num_locations)]
    return locations

# CALCULATING DISTANCE BETWEEN EACH LOCATION USING EUCLIDEAN 
def compute_euclidean_distance_matrix(locations):
    size = len(locations)
    matrix = [[0] * size for _ in range(size)]
    for i in range(size):
        for j in range(i+1, size):
            dist = math.hypot(locations[i][1] - locations[j][1], locations[i][2] - locations[j][2])
            matrix[i][j] = matrix[j][i] = dist
    return matrix

# ROUTE PLAN
def route_planning(locations, num_vehicles, max_distance, max_deliveries):
    distance_matrix = compute_euclidean_distance_matrix(locations)
    routes = {i: [] for i in range(1, num_vehicles + 1)}
    visited_locations = set()

    for vehicle_idx in range(1, num_vehicles + 1):
        total_vehicle_distance = 0

        while True:
            route = [locations[0]]  # Start at the depot
            current_location = 0
            total_route_distance = 0
            deliveries_done = 0

            while deliveries_done < max_deliveries and total_route_distance + total_vehicle_distance < max_distance:
                next_location = None
                min_distance = float('inf')
                for idx, loc in enumerate(locations):
                    if idx != 0 and idx not in visited_locations:
                        travel_distance = distance_matrix[current_location][idx]
                        return_distance = distance_matrix[idx][0]
                        projected_total_distance = total_route_distance + total_vehicle_distance + travel_distance + return_distance
                        if projected_total_distance < max_distance and travel_distance < min_distance:
                            min_distance = travel_distance
                            next_location = (idx, loc)

                if next_location is None:
                    break

                current_location = next_location[0]
                visited_locations.add(current_location)
                route.append(next_location[1])
                total_route_distance += min_distance
                deliveries_done += next_location[1][3]

            if current_location != 0:  # Ensure return to depot
                return_to_depot_distance = distance_matrix[current_location][0]
                total_route_distance += return_to_depot_distance
                route.append(locations[0])

            routes[vehicle_idx].append((route, total_route_distance))
            total_vehicle_distance += total_route_distance

            if total_vehicle_distance >= max_distance:
                break  # Stop further runs if maximum distance is reached or exceeded

            if next_location is None:
                break  # No further locations can be added

    return routes


class RouteApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

# INPUT WIDGETS
    def initUI(self):
        self.setWindowTitle('Vehicle Routing System')
        self.setGeometry(100, 100, 1200, 800)

        widget = QWidget(self)
        self.setCentralWidget(widget)
        layout = QVBoxLayout(widget)

# STANDBY VALUES
        form_layout = QHBoxLayout()
        self.vehicles = QLineEdit("4")
        self.max_distance = QLineEdit("100")
        self.deliveries_in = QLineEdit("10")
        self.locations_In = QLineEdit("200")

# USER INPUTS
        form_layout.addWidget(QLabel('Number of Vehicles'))
        form_layout.addWidget(self.vehicles)
        form_layout.addWidget(QLabel('Max Distance per Vehicle (km)'))
        form_layout.addWidget(self.max_distance)
        form_layout.addWidget(QLabel('Max Deliveries per Run'))
        form_layout.addWidget(self.deliveries_in)
        form_layout.addWidget(QLabel('Number of Locations'))
        form_layout.addWidget(self.locations_In)

        layout.addLayout(form_layout)

        calc_btn = QPushButton('Generate Routes')
        calc_btn.clicked.connect(self.calculate_routes)
        layout.addWidget(calc_btn)

        self.figure = Figure()
        self.canvas = FigureCanvas(self.figure)
        layout.addWidget(self.canvas)

    def calculate_routes(self):
        num_vehicles = int(self.vehicles.text())
        max_distance = int(self.max_distance.text())
        max_deliveries = int(self.deliveries_in.text())
        num_locations = int(self.locations_In.text())

        locations = generate_locations(num_locations)
        routes = route_planning(locations, num_vehicles, max_distance, max_deliveries)
        self.plot_routes(routes, locations)

# ROUTE GRAPHICS AND COLOURS
    def plot_routes(self, routes_dict, locations):
        self.figure.clear()
        ax = self.figure.add_subplot(111)
        colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k']  # Color set for routes

        for vehicle_idx, routes in routes_dict.items():
            color = colors[(vehicle_idx - 1) % len(colors)]
            for run_idx, (route, dist) in enumerate(routes):
                x_coords, y_coords = zip(*[(loc[1], loc[2]) for loc in route])
                ax.plot(x_coords, y_coords, marker='o', linestyle='-', color=color,
                        label=f'Vehicle {vehicle_idx} Run {run_idx + 1}: {dist:.2f} km')

                # Annotate distances between points
                for i in range(1, len(route)):
                    start = route[i-1]
                    end = route[i]
                    distance = math.hypot(end[1] - start[1], end[2] - start[2])
                    mid_x = (start[1] + end[1]) / 2
                    mid_y = (start[2] + end[2]) / 2
                    ax.text(mid_x, mid_y, f'{distance:.2f} km', color=color, fontsize=5, ha='center') 

                for loc in route:
                    # Annotate location ID and deliveries with adjusted font size
                    ax.text(loc[1], loc[2] + 1.5, f'ID: {loc[0]} - Deliv: {loc[3]}', color=color, fontsize=5, ha='center', va='bottom')

        ax.set_title('Vehicle Routes')
        ax.set_xlabel('X Coordinate')
        ax.set_ylabel('Y Coordinate')
        ax.legend()
        self.canvas.draw()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = RouteApp()
    ex.show()
    sys.exit(app.exec_())
